{"version":3,"sources":["components/Map/Map.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultViewport","latitude","longitude","zoom","bearing","pitch","Map","props","useState","sensors","length","coordinates","lat","lng","getFirstSensorData","sensorsData","viewport","setViewport","className","width","height","mapStyle","onViewportChange","nextViewport","mapboxApiAccessToken","App","setSensorsData","useEffect","a","fetch","response","json","getData","err","console","error","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAmBMA,EAA+B,CACnCC,UAAW,OACXC,UAAW,QACXC,KAAM,IACNC,QAAS,EACTC,MAAO,GAmBIC,EAAM,SAACC,GAAqB,IAAD,EACNC,mBAjBP,SAACC,GAC1B,IAAKA,EAAQC,OACX,OAAOV,EAFoD,kBAOzDS,EAAQ,GADVE,YAN2D,GAM7CC,EAN6C,KAMxCC,EANwC,KAS7D,OAAO,2BACFb,GADL,IAEEC,SAAUW,EACVV,UAAWW,IAK4BC,CAAmBP,EAAMQ,cAD5B,mBAC/BC,EAD+B,KACrBC,EADqB,KAGtC,OACE,qBAAKC,UAAU,eAAf,SACE,cAAC,IAAD,2BACMF,GADN,IAEEG,MAAM,QACNC,OAAO,QACPC,SAAS,qCACTC,iBAAkB,SAACC,GAAD,OAAkBN,EAAYM,IAChDC,qBAjDM,yGCDDC,EAAM,WAAO,IAAD,EACejB,qBADf,mBAChBO,EADgB,KACHW,EADG,KAiBvB,OAdAC,qBAAU,WACR,KACe,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,8CADf,cACRC,EADQ,gBAEmBA,EAASC,OAF5B,OAERA,EAFQ,OAGdL,EAAeK,GAHD,2CAAH,qDAMbC,GACA,MAAOC,GACPC,QAAQC,WAET,IAGD,8BACGpB,EACC,qCACE,8BAAMqB,KAAKC,UAAUtB,EAAa,KAAM,KACxC,cAAC,EAAD,CAAKA,YAAaA,OAGpB,2CCfOuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2bcbaff0.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport ReactMapGL from 'react-map-gl'\nimport { Sensor } from '../../ApI/Sensor/Sensor'\n\nconst TOKEN = 'pk.eyJ1IjoiY29kZXN0YXItaW90IiwiYSI6ImNraDZjeTRjcTA5Z2Eyd281djNnc2d3eHUifQ.VcY4aGyFHBQo_r701-3A_A'\n\ntype MapProps = Readonly<{\n  sensorsData: Sensor[]\n}>\n\ntype MapViewport = Readonly<{\n  latitude: number\n  longitude: number\n  zoom: number\n  bearing: number\n  pitch: number\n}>\n\nconst defaultViewport: MapViewport = {\n  latitude: -1.9444,\n  longitude: 30.0616,\n  zoom: 7.8,\n  bearing: 0,\n  pitch: 0,\n}\n\nconst getFirstSensorData = (sensors: Sensor[]): MapViewport => {\n  if (!sensors.length) {\n    return defaultViewport\n  }\n\n  const {\n    coordinates: [lat, lng],\n  } = sensors[0]\n\n  return {\n    ...defaultViewport,\n    latitude: lat,\n    longitude: lng,\n  }\n}\n\nexport const Map = (props: MapProps) => {\n  const [viewport, setViewport] = useState(getFirstSensorData(props.sensorsData))\n\n  return (\n    <div className=\"mapbox-react\">\n      <ReactMapGL\n        {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        mapboxApiAccessToken={TOKEN}\n      />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Map } from '../Map/Map'\nimport { SensorJSON } from '../../ApI/Sensor/Sensor'\n\nexport const App = () => {\n  const [sensorsData, setSensorsData] = useState<SensorJSON[]>()\n\n  useEffect(() => {\n    try {\n      const getData = async () => {\n        const response = await fetch('https://codestar-iot-api.herokuapp.com/get')\n        const json: SensorJSON[] = await response.json()\n        setSensorsData(json)\n      }\n\n      getData()\n    } catch (err) {\n      console.error()\n    }\n  }, [])\n\n  return (\n    <div>\n      {sensorsData ? (\n        <>\n          <pre>{JSON.stringify(sensorsData, null, 2)}</pre>\n          <Map sensorsData={sensorsData} />\n        </>\n      ) : (\n        <p>No data</p>\n      )}\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}