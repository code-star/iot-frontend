{"version":3,"sources":["components/Map/Map.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultViewport","latitude","longitude","zoom","bearing","pitch","Markers","sensorsData","filter","entry","coordinates","map","index","lat","lng","Map","useState","sensors","length","getFirstSensorData","viewport","setViewport","className","width","height","mapStyle","onViewportChange","nextViewport","mapboxApiAccessToken","getData","a","fetch","response","json","sensorData","find","line","n","v","temperature","console","error","App","setSensorsData","useEffect","init","interval","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49df098b.chunk.js","sourcesContent":["import React, { FC, useState } from 'react'\n\nimport ReactMapGL, { Marker } from 'react-map-gl'\nimport { Sensor } from '../../API/Sensor/Sensor'\n\nconst TOKEN = 'pk.eyJ1IjoiY29kZXN0YXItaW90IiwiYSI6ImNraDZjeTRjcTA5Z2Eyd281djNnc2d3eHUifQ.VcY4aGyFHBQo_r701-3A_A'\n\ntype MapProps = Readonly<{\n  sensorsData: Sensor[]\n}>\n\ntype MapViewport = Readonly<{\n  latitude: number\n  longitude: number\n  zoom: number\n  bearing: number\n  pitch: number\n}>\n\nconst defaultViewport: MapViewport = {\n  latitude: -1.9444,\n  longitude: 30.0616,\n  zoom: 15,\n  bearing: 0,\n  pitch: 0,\n}\n\nconst getFirstSensorData = (sensors: Sensor[]): MapViewport => {\n  if (!sensors.length) {\n    return defaultViewport\n  }\n\n  const {\n    coordinates: [lat, lng],\n  } = sensors.filter((entry) => {\n    return entry.coordinates[0] > 0\n  })[0]\n\n  return {\n    ...defaultViewport,\n    latitude: lat,\n    longitude: lng,\n  }\n}\n\nconst Markers: FC<MapProps> = ({ sensorsData }) => {\n  return (\n    <>\n      {sensorsData\n        .filter((entry) => entry.coordinates[0] > 0)\n        .map(({ coordinates: [lat, lng] }, index) => (\n          <Marker key={index} longitude={lng} latitude={lat}>\n            x\n          </Marker>\n        ))}\n    </>\n  )\n}\n\nexport const Map: FC<MapProps> = ({ sensorsData }) => {\n  const [viewport, setViewport] = useState(getFirstSensorData(sensorsData))\n\n  return (\n    <div className=\"mapbox-react\">\n      <ReactMapGL\n        {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        mapboxApiAccessToken={TOKEN}\n      >\n        <Markers sensorsData={sensorsData} />\n      </ReactMapGL>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Map } from '../Map/Map'\nimport { Sensor, SensorEntry, SensorJSON } from '../../API/Sensor/Sensor'\n// import iotJson from '../../iot.json'\n\nconst getData = async () => {\n  try {\n    const response = await fetch('https://codestar-iot-api.herokuapp.com/get')\n    const json: SensorJSON = await response.json()\n    // const json = iotJson;\n    // TODO it would be much better to use RxJS to do this\n    const sensorData: Sensor[] = json\n      .filter((entry: SensorEntry) => {\n        const latitude = entry.find((line) => line.n === 'latitude')?.v ?? 0\n        const temperature = entry.find((line) => line.n === 'temperature')?.v ?? 0\n        return latitude || temperature\n      })\n      .map((entry: SensorEntry) => {\n        const latitude = entry.find((line) => line.n === 'latitude')?.v ?? 0\n        const longitude = entry.find((line) => line.n === 'longitude')?.v ?? 0\n        const temperature = entry.find((line) => line.n === 'temperature')?.v ?? 0\n        return {\n          temperature,\n          coordinates: [latitude, longitude],\n        }\n      })\n    return sensorData\n  } catch (err) {\n    console.error()\n    return []\n  }\n}\n\nexport const App = () => {\n  const [sensorsData, setSensorsData] = useState<Sensor[]>()\n\n  useEffect(() => {\n    const init = async () => {\n      setSensorsData(await getData());\n    }\n    init();\n    const interval = setInterval(async () => {\n      setSensorsData(await getData())\n    }, 10000)\n    return () => clearInterval(interval)\n  }, [])\n\n  return (\n    <div>\n      {sensorsData ? (\n        <>\n          {/* <pre>{JSON.stringify(sensorsData, null, 2)}</pre> */}\n          <Map sensorsData={sensorsData} />\n        </>\n      ) : (\n        <p>No data</p>\n      )}\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}