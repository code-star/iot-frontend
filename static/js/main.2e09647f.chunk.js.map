{"version":3,"sources":["components/Map/Map.module.scss","components/Map/Map.tsx","components/App/fakerUtil.ts","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","defaultViewport","latitude","longitude","zoom","bearing","pitch","Markers","sensorsData","useState","sensors","console","log","reduce","acc","curr","index","toString","showDetails","data","setData","toggleShowDetails","Object","entries","filter","coordinates","map","sensorData","temperature","lat","lng","className","styles","marker","onClick","details","Map","length","entry","getFirstSensorData","viewport","setViewport","width","height","mapStyle","onViewportChange","nextViewport","mapboxApiAccessToken","fakeData","find","line","n","v","addFakeData","a","counter","timer","setInterval","fetch","method","body","JSON","stringify","error","clearInterval","getData","response","json","App","setSensorsData","useEffect","fakeDataTimer","warn","init","interval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e09647f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"Map_marker__1cD1H\",\"details\":\"Map_details__3JYjJ\"};","import React, { FC, useState } from 'react'\n\nimport ReactMapGL, { Marker } from 'react-map-gl'\nimport { Sensor } from '../../API/Sensor/Sensor'\nimport styles from './Map.module.scss'\n\nconst TOKEN = 'pk.eyJ1IjoiY29kZXN0YXItaW90IiwiYSI6ImNraDZjeTRjcTA5Z2Eyd281djNnc2d3eHUifQ.VcY4aGyFHBQo_r701-3A_A'\n\ntype MapProps = Readonly<{\n  sensorsData: Sensor[]\n}>\n\ntype MapViewport = Readonly<{\n  latitude: number\n  longitude: number\n  zoom: number\n  bearing: number\n  pitch: number\n}>\n\nconst defaultViewport: MapViewport = {\n  latitude: -1.9444,\n  longitude: 30.0616,\n  zoom: 15,\n  bearing: 0,\n  pitch: 0,\n}\n\nconst getFirstSensorData = (sensors: Sensor[]): MapViewport => {\n  if (!sensors.length) {\n    return defaultViewport\n  }\n\n  const {\n    coordinates: [lat, lng],\n  } = sensors.filter((entry) => {\n    return entry.coordinates[0] > 0\n  })[0]\n\n  return {\n    ...defaultViewport,\n    latitude: lat,\n    longitude: lng,\n  }\n}\n\ntype SensorData = Sensor &\n  Readonly<{\n    showDetails: boolean\n  }>\n\nfunction mapSensorsData(sensors: Sensor[]) {\n  console.log(sensors)\n  return sensors.reduce<Record<string, SensorData>>(\n    (acc, curr, index) => ({\n      ...acc,\n      [index.toString()]: {\n        ...curr,\n        showDetails: false,\n      },\n    }),\n    {},\n  )\n}\n\nconst Markers: FC<MapProps> = ({ sensorsData }) => {\n  const [data, setData] = useState<Record<string, SensorData>>(() => mapSensorsData(sensorsData))\n\n  const toggleShowDetails = (index: string) => () => {\n    setData((data) => ({\n      ...data,\n      [index]: {\n        ...data[index],\n        showDetails: !data[index].showDetails,\n      },\n    }))\n  }\n\n  return (\n    <>\n      {Object.entries(data)\n        .filter(([, sensorData]) => sensorData.coordinates[0] > 0)\n        .map(([index, sensorData]) => {\n          const {\n            showDetails,\n            temperature,\n            coordinates: [lat, lng],\n          } = sensorData\n\n          return (\n            <Marker key={index} className={styles.marker} longitude={lng} latitude={lat}>\n              <span onClick={toggleShowDetails(index)}>\n                <span>üìç</span>\n                {showDetails ? (\n                  <div className={styles.details}>\n                    <p>Temperature: {temperature}</p>\n                  </div>\n                ) : null}\n              </span>\n            </Marker>\n          )\n        })}\n    </>\n  )\n}\n\nexport const Map: FC<MapProps> = ({ sensorsData }) => {\n  const [viewport, setViewport] = useState(getFirstSensorData(sensorsData))\n\n  return (\n    <div className=\"mapbox-react\">\n      <ReactMapGL\n        {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        mapboxApiAccessToken={TOKEN}\n      >\n        <Markers sensorsData={sensorsData} />\n      </ReactMapGL>\n    </div>\n  )\n}\n","import { SensorJSON, SensorEntry } from '../../API/Sensor/Sensor';\nimport iotJson from '../../iot.json'\n\nconst fakeData: SensorJSON = iotJson.filter((entry: SensorEntry) => entry.find((line) => line.n === 'latitude')?.v);\n\nconst addFakeData = async (): Promise<NodeJS.Timeout> => {\n  let counter = 0\n  const timer = setInterval(async () => {\n    if (fakeData.length > counter) {\n      try {\n        await fetch('https://codestar-iot-api.herokuapp.com/set', {\n          method: 'POST',\n          body: JSON.stringify(fakeData[counter]),\n        })\n        counter++;\n      } catch (err) {\n        console.error(err)\n      }\n    } else {\n      clearInterval(timer)\n    }\n  }, 27000)\n  return timer\n}\n\nexport default addFakeData;\n","import React, { useEffect, useState } from 'react'\nimport { Map } from '../Map/Map'\nimport { Sensor, SensorEntry, SensorJSON } from '../../API/Sensor/Sensor'\nimport addFakeData from './fakerUtil'\n\nconst getData = async () => {\n  try {\n    const response = await fetch('https://codestar-iot-api.herokuapp.com/get')\n    const json: SensorJSON = await response.json()\n    // TODO it would be much better to use RxJS to do this\n    const sensorData: Sensor[] = json\n      .filter((entry: SensorEntry) => {\n        if(entry.find) {\n          const latitude = entry.find((line) => line.n === 'latitude')?.v ?? 0\n          const temperature = entry.find((line) => line.n === 'temperature')?.v ?? 0\n          return latitude || temperature  \n        }\n        return false;\n      })\n      .map((entry: SensorEntry) => {\n        const latitude = entry.find((line) => line.n === 'latitude')?.v ?? 0\n        const longitude = entry.find((line) => line.n === 'longitude')?.v ?? 0\n        const temperature = entry.find((line) => line.n === 'temperature')?.v ?? 0\n        return {\n          temperature,\n          coordinates: [latitude, longitude],\n        }\n      });\n      return sensorData\n  } catch (err) {\n    console.error(err)\n    return []\n  }\n}\n\nexport const App = () => {\n  const [sensorsData, setSensorsData] = useState<Sensor[]>()\n\n  useEffect(() => {\n    let fakeDataTimer: NodeJS.Timeout | null = null\n    const init = async () => {\n      const sensorData = await getData()\n      // const sensorData: Sensor[] = []\n      setSensorsData(sensorData)\n      if (sensorData.length === 0) {\n        console.warn(\"Initial sensorData was empty, so progressively injecting fake data\");\n        fakeDataTimer = await addFakeData()\n      }\n    }\n    init()\n    const interval = setInterval(async () => {\n      setSensorsData(await getData())\n    }, 10000)\n\n    return () => {\n      clearInterval(interval)\n      if (fakeDataTimer) {\n        clearInterval(fakeDataTimer)\n      }\n    }\n  }, [])\n\n  return (\n    <div>\n      {sensorsData ? (\n        <>\n          {/* <pre>{JSON.stringify(sensorsData, null, 2)}</pre> */}\n          <Map sensorsData={sensorsData} />\n        </>\n      ) : (\n        <p>No data</p>\n      )}\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}